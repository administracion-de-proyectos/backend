definitions:
  controller.Class:
    properties:
      course_title:
        type: string
      metadata: {}
      title:
        type: string
    type: object
  controller.CourseRequest:
    properties:
      category:
        type: string
      classes:
        items:
          $ref: '#/definitions/controller.Class'
        type: array
      is_school_oriented:
        type: boolean
      max_age:
        type: integer
      metadata: {}
      min_age:
        type: integer
      title:
        type: string
    type: object
  controller.CourseState:
    properties:
      age_filtered:
        type: boolean
      category:
        type: string
      classes:
        items:
          type: string
        type: array
      courseTitle:
        type: string
      creatorEmail:
        type: string
      isSchoolOriented:
        type: boolean
      isSubscribed:
        type: boolean
      max_age:
        type: integer
      metadata: {}
      min_age:
        type: integer
    type: object
  controller.CourseStateResponse:
    properties:
      amount:
        type: integer
      courses:
        items:
          $ref: '#/definitions/controller.CourseState'
        type: array
    type: object
  controller.CreateExamRequest:
    properties:
      points:
        items:
          $ref: '#/definitions/controller.Point'
        type: array
    required:
    - points
    type: object
  controller.ErrorMsg:
    properties:
      reason:
        example: mensaje de error
        type: string
    type: object
  controller.Exam:
    properties:
      class:
        type: string
      course:
        type: string
      points:
        items:
          $ref: '#/definitions/controller.Point'
        type: array
    type: object
  controller.Point:
    properties:
      answer:
        type: string
      possibilities:
        items:
          type: string
        type: array
      question:
        type: string
    type: object
  controller.Score:
    properties:
      correct_amount:
        type: integer
      email:
        type: string
      total_amount:
        type: integer
    type: object
  controller.Submission:
    properties:
      class:
        type: string
      course:
        type: string
      points:
        items:
          $ref: '#/definitions/controller.SubmissionPoint'
        type: array
    required:
    - class
    - course
    - points
    type: object
  controller.SubmissionPoint:
    properties:
      answer:
        type: string
      question:
        type: string
    type: object
  controller.Token:
    properties:
      token:
        example: asdasfasd
        type: string
    type: object
  controller.UserRequest:
    properties:
      email:
        type: string
      metadata: {}
      name:
        type: string
      password:
        type: string
      profile:
        type: string
    type: object
  controller.UserResponse:
    properties:
      email:
        type: string
      metadata: {}
      name:
        type: string
      profile:
        type: string
    type: object
info:
  contact: {}
paths:
  /course/:
    get:
      consumes:
      - application/json
      description: Get all courses that follows a criteria
      parameters:
      - description: Title string for which you want to look
        in: query
        name: title
        type: string
      - description: ownerEmail string for which you want to look
        in: query
        name: ownerEmail
        type: string
      - description: category string for which you want to look
        in: query
        name: category
        type: string
      - description: Age of the course you want to retrieve
        in: query
        name: desiredAge
        type: integer
      - description: true if school oriented, any other value otherwise
        in: query
        name: isSchoolOriented
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CourseStateResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Get all courses
      tags:
      - Course request
    post:
      consumes:
      - application/json
      description: Create course using the token as a way to add account to course
        owner
      parameters:
      - description: Title and Category are required
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/controller.CourseRequest'
      - description: token required for request
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CourseState'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Create course
      tags:
      - Course request
  /course/{id}:
    get:
      consumes:
      - application/json
      description: Fetch a course with a given id
      parameters:
      - description: course id which you look for
        in: path
        name: id
        required: true
        type: string
      - description: token required for request
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CourseState'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Fetch a course
      tags:
      - Course request
    post:
      consumes:
      - application/json
      description: Create class for a previously created course, if course does not
        exist this endpoint will fail
      parameters:
      - description: Title is required
        in: body
        name: class
        required: true
        schema:
          $ref: '#/definitions/controller.Class'
      - description: course id which you want to add a course
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CourseState'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Create class for created course
      tags:
      - Course request
  /course/{id}/{classId}:
    delete:
      consumes:
      - application/json
      description: Removes a class
      parameters:
      - description: class id you want to remove
        in: path
        name: classId
        required: true
        type: string
      - description: course id which you look for
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Remove class created
      tags:
      - Course request
    get:
      consumes:
      - application/json
      description: Get class with id and class id
      parameters:
      - description: class id you want to fetch
        in: path
        name: classId
        required: true
        type: string
      - description: course id which you look for
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Class'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Fetch a class
      tags:
      - Course request
  /course/subscribe/:
    get:
      consumes:
      - application/json
      description: Get all courses in which the user has subscribed
      parameters:
      - description: token required for request
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.CourseStateResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Get subscribed courses
      tags:
      - Subscription
  /course/subscribe/{id}:
    post:
      consumes:
      - application/json
      description: Subscribe a user given by its token to a course
      parameters:
      - description: course in which the current user wants to subscribe
        in: path
        name: id
        required: true
        type: string
      - description: token required for request
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: Object
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Subscribe
      tags:
      - Subscription
  /exams/{courseId}/{classId}:
    delete:
      consumes:
      - application/json
      description: Removes an exam already created
      parameters:
      - description: class id you want to remove
        in: path
        name: classId
        required: true
        type: string
      - description: course id which you look for
        in: path
        name: courseId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Remove exam created
      tags:
      - Exams request
    get:
      consumes:
      - application/json
      description: Given a course id and a class id, gets the specific exam
      parameters:
      - description: class id you want to remove
        in: path
        name: classId
        required: true
        type: string
      - description: course id which you look for
        in: path
        name: courseId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Exam'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Get an exam
      tags:
      - Exams request
    post:
      consumes:
      - application/json
      description: Given a course id and a class id, creates an exam for the class
      parameters:
      - description: At least one point is required
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/controller.CreateExamRequest'
      - description: class id you want to remove
        in: path
        name: classId
        required: true
        type: string
      - description: course id which you look for
        in: path
        name: courseId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Create an exam for a given class
      tags:
      - Exams request
  /exams/submission:
    post:
      consumes:
      - application/json
      description: Given a user identified by its token, submit a resolution
      parameters:
      - description: token required for request
        in: header
        name: Authorization
        required: true
        type: string
      - description: At least one point is required
        in: body
        name: course
        required: true
        schema:
          $ref: '#/definitions/controller.Submission'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Score'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Add submission
      tags:
      - Exams request
  /scores/{courseId}/class/{classId}:
    get:
      consumes:
      - application/json
      description: Given a course id and a class id and a user, gets the specific
        score
      parameters:
      - description: class id you want to look for
        in: path
        name: classId
        required: true
        type: string
      - description: course id which you look for
        in: path
        name: courseId
        required: true
        type: string
      - description: token required for request
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Score'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Get a score
      tags:
      - Exams request
  /scores/{courseId}/class/{classId}/{userEmail}:
    get:
      consumes:
      - application/json
      description: Given a course id and a class id and a user, gets the specific
        score
      parameters:
      - description: class id you want to look for
        in: path
        name: classId
        required: true
        type: string
      - description: course id which you look for
        in: path
        name: courseId
        required: true
        type: string
      - description: email you look for, is an exact match
        in: path
        name: userEmail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Score'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Get a score
      tags:
      - Exams request
  /scores/{courseId}/user/{userEmail}:
    get:
      consumes:
      - application/json
      description: Given a course id and a user email, gets all the scores from that
        user in given course
      parameters:
      - description: course id which you look for
        in: path
        name: courseId
        required: true
        type: string
      - description: email you look for, is an exact match
        in: path
        name: userEmail
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/controller.Score'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Get an exam
      tags:
      - Exams request
  /user/login/:
    post:
      consumes:
      - application/json
      description: SignInUser
      parameters:
      - description: Email and Password are required
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controller.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: SignIn User
      tags:
      - User request
  /user/profile/{id}:
    get:
      description: Get User profile with token
      parameters:
      - description: token required for request
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Get User Profile
      tags:
      - User request
    patch:
      description: Update User Profile
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: Profile and Name are updatable
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controller.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Update User Profile
      tags:
      - User request
  /user/signUp/:
    post:
      consumes:
      - application/json
      description: Create User Account
      parameters:
      - description: User required Data to SignUp
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/controller.UserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/controller.Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/controller.ErrorMsg'
      summary: Sign Up User
      tags:
      - User request
swagger: "2.0"
